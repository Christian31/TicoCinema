@using TicoCinema.WebApplication.Utils
@model TicoCinema.WebApplication.ViewModels.CinemaScheduleViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>CinemaSchedule</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.MovieId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MovieId, (IEnumerable<SelectListItem>)ViewBag.MovieId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MovieId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MovieFormatId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MovieFormatId, (IEnumerable<SelectListItem>)ViewBag.MovieFormatId, new { @class = "form-control", @onchange = "GetCinemasAvailable()" })
                @Html.ValidationMessageFor(model => model.MovieFormatId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BeginDatetime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.BeginDatetime, new { @class = "form-control datepicker", @onchange = "GetCinemasAvailable()" })
                @Html.ValidationMessageFor(model => model.BeginDatetime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FinishDatetime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.FinishDatetime, new { @class = "form-control datepicker", @onchange = "GetCinemasAvailable()" })
                @Html.ValidationMessageFor(model => model.FinishDatetime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BeginTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.BeginTime, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BeginTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HoursRange, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.HoursRange, TicoCinema.WebApplication.Utils.Enums.HoursRange.None.ToSelectList(), new { @class = "form-control", @onchange = "GetCinemasAvailable()" })
                @Html.ValidationMessageFor(model => model.HoursRange, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CinemaId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CinemaId, new List<SelectListItem>(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CinemaId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/Custom/CinemaSchedules.js");

    <script type="text/javascript">
        $(function () {
            var dateFormat = "mm/dd/yy",
                from = $("#BeginDatetime")
                    .datepicker({
                        minDate: +1,
                        changeMonth: true
                    })
                    .on("change", function () {
                        to.datepicker("option", "minDate", getDate(this));
                    }),
                to = $("#FinishDatetime").datepicker({
                    defaultDate: "+1w",
                    changeMonth: true,
                })
                    .on("change", function () {
                        from.datepicker("option", "maxDate", getDate(this));
                    });

            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }

                return date;
            }
        });

        $('#BeginTime').timepicker({
            timeFormat: 'HH:mm',
            dynamic: false,
            dropdown: true,
            scrollbar: true,
            change: GetCinemasAvailable
        });

        GetCinemasAvailable();
    </script>
}
